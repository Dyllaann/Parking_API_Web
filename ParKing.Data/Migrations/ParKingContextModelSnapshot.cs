// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParKing.Data;

namespace ParKing.Data.Migrations
{
    [DbContext(typeof(ParKingContext))]
    partial class ParKingContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024");

            modelBuilder.Entity("ParKing.Data.Engine.ParkingAvailability", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<bool>("Available");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ParkingAvailabilities");
                });

            modelBuilder.Entity("ParKing.Data.Engine.ParkingLocation", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreatedAt");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<byte[]>("ParkingLotId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ParkingLotId")
                        .IsUnique();

                    b.ToTable("ParkingLocations");
                });

            modelBuilder.Entity("ParKing.Data.Engine.ParkingLot", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<byte[]>("AvailabilityId")
                        .IsRequired()
                        .HasConversion(new ValueConverter<byte[], byte[]>(v => default(byte[]), v => default(byte[]), new ConverterMappingHints(size: 16)));

                    b.Property<DateTime>("CreatedAt");

                    b.Property<bool>("HasChargingStation");

                    b.Property<string>("PricingZone");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityId")
                        .IsUnique();

                    b.ToTable("ParkingLots");
                });

            modelBuilder.Entity("ParKing.Data.Engine.ParkingLocation", b =>
                {
                    b.HasOne("ParKing.Data.Engine.ParkingLot", "Lot")
                        .WithOne("Location")
                        .HasForeignKey("ParKing.Data.Engine.ParkingLocation", "ParkingLotId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ParKing.Data.Engine.ParkingLot", b =>
                {
                    b.HasOne("ParKing.Data.Engine.ParkingAvailability", "Availability")
                        .WithOne("Lot")
                        .HasForeignKey("ParKing.Data.Engine.ParkingLot", "AvailabilityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
